/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.SystemAdminWorkAreaJPanel;

import Business.Enterprise.*;
import static Business.Enterprise.EnterpriseType.ADVERTISING;
import static Business.Enterprise.EnterpriseType.DELIVERY;
import static Business.Enterprise.EnterpriseType.MANUFACTURING;
import static Business.Enterprise.EnterpriseType.RETAIL;
import Business.Network.Network;
import Business.WorkFlowSystem;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yuanchanglee
 */
public class ManageEnterpriseJPanel extends javax.swing.JPanel {

    private JTable enterpriseTable;
    private JButton createEnterpriseButton;
    private JButton deleteEnterpriseButton;
    private JPanel userProcessContainer;
    private WorkFlowSystem system;

    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public ManageEnterpriseJPanel(JPanel userProcessContainer, WorkFlowSystem system) {
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        initComponents();
        customizeComponents();
        populateTable();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.CardLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void customizeComponents() {
        setBackground(Color.decode("#E8EEF1"));

        // ======= Table Panel Section =======
        JPanel tablePanel = new JPanel(new BorderLayout());
        tablePanel.setBackground(Color.decode("#E8EEF1"));

        JLabel tableLabel = new JLabel("Enterprise Table", SwingConstants.CENTER);
        tableLabel.setFont(new Font("Arial", Font.BOLD, 24));
        tablePanel.add(tableLabel, BorderLayout.NORTH);

        // Initialize table
        enterpriseTable = new JTable(new DefaultTableModel(
            new Object[][]{},
            new String[]{"Enterprise Name", "Network", "Type"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });

        // Configure table appearance
        enterpriseTable.setRowHeight(25);
        enterpriseTable.setFillsViewportHeight(true);
        enterpriseTable.setSelectionBackground(Color.decode("#D4E6F1"));
        enterpriseTable.getTableHeader().setBackground(Color.decode("#2980B9"));
        enterpriseTable.getTableHeader().setForeground(Color.WHITE);
        enterpriseTable.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));

        if (enterpriseTable.getColumnModel().getColumnCount() > 0) {
            enterpriseTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            enterpriseTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            enterpriseTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        }

        JScrollPane scrollPane = new JScrollPane(enterpriseTable);
        tablePanel.add(scrollPane, BorderLayout.CENTER);

        // ======= Button Panel Section =======
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));
        buttonPanel.setBackground(Color.decode("#E8EEF1"));

        createEnterpriseButton = new JButton("Create Enterprise");
        createEnterpriseButton.setBackground(Color.decode("#2980B9"));
        createEnterpriseButton.setForeground(Color.WHITE);
        
        deleteEnterpriseButton = new JButton("Delete Enterprise");
        deleteEnterpriseButton.setBackground(Color.decode("#E74C3C"));
        deleteEnterpriseButton.setForeground(Color.WHITE);

        buttonPanel.add(createEnterpriseButton);
        buttonPanel.add(deleteEnterpriseButton);

        tablePanel.add(buttonPanel, BorderLayout.SOUTH);
        add(tablePanel, BorderLayout.CENTER);

        // Action Listeners
        createEnterpriseButton.addActionListener(e -> {
    // Create and show CreateEnterpriseJPanel
            CreateEnterpriseJPanel createEnterprisePanel = new CreateEnterpriseJPanel(userProcessContainer, system, this);
            userProcessContainer.add(createEnterprisePanel, "CreateEnterpriseJPanel");
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.show(userProcessContainer, "CreateEnterpriseJPanel");
        });

        deleteEnterpriseButton.addActionListener(e -> {
            int selectedRow = enterpriseTable.getSelectedRow();
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(this, "Please select an enterprise to delete.");
                return;
            }

            int dialogResult = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete this enterprise?",
                "Delete Enterprise",
                JOptionPane.YES_NO_OPTION);

            if (dialogResult == JOptionPane.YES_OPTION) {
                String enterpriseName = (String) enterpriseTable.getValueAt(selectedRow, 0);
                String networkName = (String) enterpriseTable.getValueAt(selectedRow, 1);

                // Find and remove the enterprise
                for (Network network : system.getNetworkList()) {
                    if (network.getName().equals(networkName)) {
                        network.removeEnterpriseByName(enterpriseName);
                        break;
                    }
                }
                populateTable();
            }
        });
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseTable.getModel();
        model.setRowCount(0);
        
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseList()) {
                Object[] row = new Object[3];
                row[0] = enterprise.getName();
                row[1] = network.getName();
                row[2] = enterprise.getType().toString();
                model.addRow(row);
            }
        }
    }

    // Getters for testing
    public JTable getEnterpriseTable() {
        return enterpriseTable;
    }

    public JButton getCreateEnterpriseButton() {
        return createEnterpriseButton;
    }

    public JButton getDeleteEnterpriseButton() {
        return deleteEnterpriseButton;
    }
    
    public void refreshTable() {
        populateTable();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
